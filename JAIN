#PROBLEM LINK:   
[Practice][1]    
[Contest: Division 1][2]            
[Contest: Division 2][3]   

**Setter:** [Abhinav Jain][4]             
**Tester:** [Encho Mishinev][5]            
**Editorialist:** [Taranpreet Singh][6]             

#DIFFICULTY:   


#PREREQUISITES:   
Maths. (Bitmasks would be an advantage)

#PROBLEM:   
Given $N$ dishes, each dish being represented by string $D_i$ consisting of lowercase vowels, Find all ordered pairs which can form a meal. Pair of dishes $(i,j)$ can form a meal if $D_i+D_j$ contains every vowel at least once.

#QUICK EXPLANATION

 * Repeated occurrences of a vowel doesn't matter. In the end, each dish may be represented by a tuple of five boolean values, each stating whether a particular vowel is present or not.
 * There are $2^5 = 32$ tuples. We can count the frequency of each tuple in $N$ dishes. Now, we can consider every pair of a tuple and if the union of this pair of tuple contains all vowels, we can pair any dish represented by the first tuple, with any dish represented by the second tuple.
 * Edge case is the tuple representing the dishes with all vowels present. In this case, make sure to exclude the overcounted pairs $(i, i)$.
   
#EXPLANATION  

#EXPLANATION  

If we simply iterate using two nested FOR loops, and generating all the possible pairs , that would result in a O(N*N) time complexity Solution which is very 
slow.
So, to do it efficiently, we can use the concept of bitmasks.
Every Dish can be represented as the mask of 5 bits such that if it contains a particular vowel, then bit at that position will be set 1 , else it will be set 0.

We can store each string as a bitmask .
For example: 
A Dish= "aaeuua" can be represented as (1 1 0 0 1). The binary number [11001] = (25) in decimal means that the string has the vowels 'a','e', and 'u'.
a e i o u
1 1 0 0 1
The binary number [11001] = (25) in decimal means that the string has the vowels 'a','e', and 'u'.

So, Every Dish can be represented as a bit mask. So, they may vary from (00000) to (11111).
So, total number of distinct representations we can have of all the dishes is $2^5=32.

Note that the dishes containing same sets of vowels will be represented as same bitmask. 
For example: the dish="uueaa" = "ueaueaueauuae" ="aeu" =(11001).

So, We can maintain an array of size 32 which stores the frequency of each of the possible bitmasks as well.
i.e. We have divided the dishes into 32 categories. If two dishes belong to the same category, they contain the same set of vowels.

Then we can iterate over all the possible bitmasks from [00000] to [11111] i.e. from 0 to 31. and then find the count of total pairs whose concatenation has all the 5 vowels.

**Bitmasks**

All the categories we made above, were just bitmasks having 5 bits, ith bit on representing the presence of ith vowel in a dish. Union of two types of dishes 
is just the OR of bitmasks of both dishes. Checking if all vowels are present is equivalent to checking if all bit of union are set or not.i.e. checking if Bitwise 
ORing of ith and jth dish results in (11111) or not.

Hope this forms a nice introduction to bitmasks.

#Time Complexity
Time complexity is $O(N+4^C)$ per test case where $C = 5$ is the number of vowels.

#AUTHOR'S AND TESTER'S SOLUTIONS:        
[Setter's solution][7]  
[Tester's solution][8]      
[Editorialist's solution][9]     

Feel free to Share your approach, If it differs. Suggestions are always welcomed. :)


  [1]: https://www.codechef.com/problems/JAIN
  [2]: https://www.codechef.com/MARCH19A/problems/JAIN
  [3]: https://www.codechef.com/MARCH19B/problems/JAIN
  [4]: https://www.codechef.com/users/iamabjain
  [5]: https://www.codechef.com/users/enchom
  [6]: https://www.codechef.com/users/taran_1407
  [7]: https://www.codechef.com/download/Solutions/MARCH19/setter/JAIN.cpp
  [8]: https://www.codechef.com/download/Solutions/MARCH19/tester/JAIN.cpp
  [9]: https://www.codechef.com/download/Solutions/MARCH19/editorialist/JAIN.java
